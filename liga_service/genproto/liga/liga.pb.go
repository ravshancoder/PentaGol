// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: liga/liga.proto

package liga

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AllLigaRequest struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllLigaRequest) Reset()         { *m = AllLigaRequest{} }
func (m *AllLigaRequest) String() string { return proto.CompactTextString(m) }
func (*AllLigaRequest) ProtoMessage()    {}
func (*AllLigaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1f8d8504eb0d8c, []int{0}
}
func (m *AllLigaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllLigaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllLigaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllLigaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllLigaRequest.Merge(m, src)
}
func (m *AllLigaRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllLigaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllLigaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllLigaRequest proto.InternalMessageInfo

func (m *AllLigaRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AllLigaRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Ligas struct {
	Ligas                []*LigaResponse `protobuf:"bytes,1,rep,name=ligas,proto3" json:"ligas"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Ligas) Reset()         { *m = Ligas{} }
func (m *Ligas) String() string { return proto.CompactTextString(m) }
func (*Ligas) ProtoMessage()    {}
func (*Ligas) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1f8d8504eb0d8c, []int{1}
}
func (m *Ligas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ligas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ligas.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ligas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ligas.Merge(m, src)
}
func (m *Ligas) XXX_Size() int {
	return m.Size()
}
func (m *Ligas) XXX_DiscardUnknown() {
	xxx_messageInfo_Ligas.DiscardUnknown(m)
}

var xxx_messageInfo_Ligas proto.InternalMessageInfo

func (m *Ligas) GetLigas() []*LigaResponse {
	if m != nil {
		return m.Ligas
	}
	return nil
}

type LigaResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description"`
	AdminId              string   `protobuf:"bytes,6,opt,name=admin_id,json=adminId,proto3" json:"admin_id"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LigaResponse) Reset()         { *m = LigaResponse{} }
func (m *LigaResponse) String() string { return proto.CompactTextString(m) }
func (*LigaResponse) ProtoMessage()    {}
func (*LigaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1f8d8504eb0d8c, []int{2}
}
func (m *LigaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LigaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LigaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LigaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LigaResponse.Merge(m, src)
}
func (m *LigaResponse) XXX_Size() int {
	return m.Size()
}
func (m *LigaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LigaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LigaResponse proto.InternalMessageInfo

func (m *LigaResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LigaResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LigaResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LigaResponse) GetAdminId() string {
	if m != nil {
		return m.AdminId
	}
	return ""
}

func (m *LigaResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *LigaResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type LigaRequest struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description"`
	AdminId              string   `protobuf:"bytes,3,opt,name=admin_id,json=adminId,proto3" json:"admin_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LigaRequest) Reset()         { *m = LigaRequest{} }
func (m *LigaRequest) String() string { return proto.CompactTextString(m) }
func (*LigaRequest) ProtoMessage()    {}
func (*LigaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1f8d8504eb0d8c, []int{3}
}
func (m *LigaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LigaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LigaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LigaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LigaRequest.Merge(m, src)
}
func (m *LigaRequest) XXX_Size() int {
	return m.Size()
}
func (m *LigaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LigaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LigaRequest proto.InternalMessageInfo

func (m *LigaRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LigaRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LigaRequest) GetAdminId() string {
	if m != nil {
		return m.AdminId
	}
	return ""
}

type IdRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdRequest) Reset()         { *m = IdRequest{} }
func (m *IdRequest) String() string { return proto.CompactTextString(m) }
func (*IdRequest) ProtoMessage()    {}
func (*IdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf1f8d8504eb0d8c, []int{4}
}
func (m *IdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdRequest.Merge(m, src)
}
func (m *IdRequest) XXX_Size() int {
	return m.Size()
}
func (m *IdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IdRequest proto.InternalMessageInfo

func (m *IdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*AllLigaRequest)(nil), "liga.AllLigaRequest")
	proto.RegisterType((*Ligas)(nil), "liga.Ligas")
	proto.RegisterType((*LigaResponse)(nil), "liga.LigaResponse")
	proto.RegisterType((*LigaRequest)(nil), "liga.LigaRequest")
	proto.RegisterType((*IdRequest)(nil), "liga.IdRequest")
}

func init() { proto.RegisterFile("liga/liga.proto", fileDescriptor_bf1f8d8504eb0d8c) }

var fileDescriptor_bf1f8d8504eb0d8c = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x65, 0x5a, 0xfe, 0x7a, 0xfb, 0x05, 0xbe, 0xef, 0x86, 0x45, 0x3f, 0x8c, 0x0d, 0xe9, 0x8a,
	0x15, 0x46, 0xd0, 0x8d, 0x3b, 0xd0, 0xc4, 0x90, 0xb8, 0xaa, 0x0f, 0x80, 0x95, 0x99, 0x34, 0x93,
	0x14, 0x5a, 0x3b, 0x83, 0x89, 0x6f, 0xe2, 0x5b, 0xf8, 0x1a, 0x2e, 0x7d, 0x04, 0x03, 0x2f, 0x62,
	0x66, 0xa6, 0x60, 0x31, 0x4a, 0xdc, 0x4c, 0xe6, 0x9e, 0x73, 0xef, 0x3d, 0x27, 0x27, 0x17, 0xda,
	0x09, 0x8f, 0xa3, 0x13, 0xf5, 0x0c, 0xb2, 0x3c, 0x95, 0x29, 0x56, 0xd5, 0x3f, 0xb8, 0x80, 0xd6,
	0x38, 0x49, 0x6e, 0x78, 0x1c, 0x85, 0xec, 0x61, 0xc5, 0x84, 0x44, 0x84, 0x6a, 0x16, 0xc5, 0xcc,
	0x23, 0x3d, 0xd2, 0xb7, 0x43, 0xfd, 0xc7, 0x0e, 0xd4, 0x12, 0xbe, 0xe0, 0xd2, 0xb3, 0x34, 0x68,
	0x8a, 0xe0, 0x14, 0x6a, 0x6a, 0x50, 0x60, 0x5f, 0xd1, 0x71, 0x24, 0x3c, 0xd2, 0xb3, 0xfb, 0xee,
	0x10, 0x07, 0x5a, 0xc6, 0x2c, 0x15, 0x59, 0xba, 0x14, 0x2c, 0x34, 0x0d, 0xc1, 0x0b, 0x81, 0x3f,
	0x65, 0x1c, 0x5b, 0x60, 0x71, 0xaa, 0xb5, 0x9c, 0xd0, 0xe2, 0x54, 0x29, 0x49, 0x2e, 0x13, 0xa6,
	0x95, 0x9c, 0xd0, 0x14, 0xd8, 0x03, 0x97, 0x32, 0x31, 0xcf, 0x79, 0x26, 0x79, 0xba, 0xf4, 0x6c,
	0xcd, 0x95, 0x21, 0xfc, 0x0f, 0xcd, 0x88, 0x2e, 0xf8, 0x72, 0xc6, 0xa9, 0x57, 0xd7, 0x74, 0x43,
	0xd7, 0x53, 0x8a, 0xc7, 0x00, 0xf3, 0x9c, 0x45, 0x92, 0xd1, 0x59, 0x24, 0xbd, 0x86, 0x26, 0x9d,
	0x02, 0x19, 0x4b, 0x45, 0xaf, 0x32, 0xba, 0xa5, 0x9b, 0x86, 0x2e, 0x90, 0xb1, 0x0c, 0xee, 0xc0,
	0x2d, 0xa7, 0xb3, 0xf3, 0x47, 0x0e, 0xf8, 0xb3, 0x0e, 0xfb, 0xb3, 0xf7, 0xfc, 0x05, 0x47, 0xe0,
	0x4c, 0xe9, 0x76, 0xff, 0x97, 0x3c, 0x86, 0x1b, 0x62, 0xf4, 0x6f, 0x59, 0xfe, 0xc8, 0xe7, 0x0c,
	0xcf, 0x01, 0x2e, 0xb5, 0x75, 0x05, 0xe2, 0xbf, 0x72, 0xd2, 0x7a, 0x41, 0xf7, 0x9b, 0xf0, 0x83,
	0x0a, 0x9e, 0x81, 0x7b, 0xcd, 0xa4, 0x02, 0x27, 0x4f, 0x53, 0x8a, 0x6d, 0xd3, 0xb4, 0x93, 0xfd,
	0x61, 0x6a, 0xa8, 0xa7, 0x8a, 0xfb, 0x10, 0xd8, 0x31, 0x4d, 0xfb, 0xf7, 0xd2, 0x75, 0x3f, 0x47,
	0x45, 0x50, 0xc1, 0x11, 0xc0, 0x15, 0x4b, 0x58, 0x61, 0xf0, 0x77, 0x42, 0x93, 0xbf, 0xaf, 0x6b,
	0x9f, 0xbc, 0xad, 0x7d, 0xf2, 0xbe, 0xf6, 0xc9, 0xf3, 0xc6, 0xaf, 0xdc, 0xd7, 0xf5, 0x91, 0x8e,
	0x3e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x6b, 0xc4, 0xa9, 0xb7, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LigaServiceClient is the client API for LigaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LigaServiceClient interface {
	CreateLiga(ctx context.Context, in *LigaRequest, opts ...grpc.CallOption) (*LigaResponse, error)
	GetLigaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*LigaResponse, error)
	GetAllLigas(ctx context.Context, in *AllLigaRequest, opts ...grpc.CallOption) (*Ligas, error)
	DeleteLiga(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*LigaResponse, error)
}

type ligaServiceClient struct {
	cc *grpc.ClientConn
}

func NewLigaServiceClient(cc *grpc.ClientConn) LigaServiceClient {
	return &ligaServiceClient{cc}
}

func (c *ligaServiceClient) CreateLiga(ctx context.Context, in *LigaRequest, opts ...grpc.CallOption) (*LigaResponse, error) {
	out := new(LigaResponse)
	err := c.cc.Invoke(ctx, "/liga.LigaService/CreateLiga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligaServiceClient) GetLigaById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*LigaResponse, error) {
	out := new(LigaResponse)
	err := c.cc.Invoke(ctx, "/liga.LigaService/GetLigaById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligaServiceClient) GetAllLigas(ctx context.Context, in *AllLigaRequest, opts ...grpc.CallOption) (*Ligas, error) {
	out := new(Ligas)
	err := c.cc.Invoke(ctx, "/liga.LigaService/GetAllLigas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligaServiceClient) DeleteLiga(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*LigaResponse, error) {
	out := new(LigaResponse)
	err := c.cc.Invoke(ctx, "/liga.LigaService/DeleteLiga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LigaServiceServer is the server API for LigaService service.
type LigaServiceServer interface {
	CreateLiga(context.Context, *LigaRequest) (*LigaResponse, error)
	GetLigaById(context.Context, *IdRequest) (*LigaResponse, error)
	GetAllLigas(context.Context, *AllLigaRequest) (*Ligas, error)
	DeleteLiga(context.Context, *IdRequest) (*LigaResponse, error)
}

// UnimplementedLigaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLigaServiceServer struct {
}

func (*UnimplementedLigaServiceServer) CreateLiga(ctx context.Context, req *LigaRequest) (*LigaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiga not implemented")
}
func (*UnimplementedLigaServiceServer) GetLigaById(ctx context.Context, req *IdRequest) (*LigaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLigaById not implemented")
}
func (*UnimplementedLigaServiceServer) GetAllLigas(ctx context.Context, req *AllLigaRequest) (*Ligas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLigas not implemented")
}
func (*UnimplementedLigaServiceServer) DeleteLiga(ctx context.Context, req *IdRequest) (*LigaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiga not implemented")
}

func RegisterLigaServiceServer(s *grpc.Server, srv LigaServiceServer) {
	s.RegisterService(&_LigaService_serviceDesc, srv)
}

func _LigaService_CreateLiga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LigaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigaServiceServer).CreateLiga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liga.LigaService/CreateLiga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigaServiceServer).CreateLiga(ctx, req.(*LigaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LigaService_GetLigaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigaServiceServer).GetLigaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liga.LigaService/GetLigaById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigaServiceServer).GetLigaById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LigaService_GetAllLigas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllLigaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigaServiceServer).GetAllLigas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liga.LigaService/GetAllLigas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigaServiceServer).GetAllLigas(ctx, req.(*AllLigaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LigaService_DeleteLiga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigaServiceServer).DeleteLiga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liga.LigaService/DeleteLiga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigaServiceServer).DeleteLiga(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LigaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liga.LigaService",
	HandlerType: (*LigaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLiga",
			Handler:    _LigaService_CreateLiga_Handler,
		},
		{
			MethodName: "GetLigaById",
			Handler:    _LigaService_GetLigaById_Handler,
		},
		{
			MethodName: "GetAllLigas",
			Handler:    _LigaService_GetAllLigas_Handler,
		},
		{
			MethodName: "DeleteLiga",
			Handler:    _LigaService_DeleteLiga_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liga/liga.proto",
}

func (m *AllLigaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllLigaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllLigaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintLiga(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintLiga(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ligas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ligas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ligas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ligas) > 0 {
		for iNdEx := len(m.Ligas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ligas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiga(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LigaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LigaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LigaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AdminId) > 0 {
		i -= len(m.AdminId)
		copy(dAtA[i:], m.AdminId)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.AdminId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LigaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LigaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LigaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdminId) > 0 {
		i -= len(m.AdminId)
		copy(dAtA[i:], m.AdminId)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.AdminId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLiga(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiga(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiga(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllLigaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovLiga(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovLiga(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ligas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ligas) > 0 {
		for _, e := range m.Ligas {
			l = e.Size()
			n += 1 + l + sovLiga(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LigaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	l = len(m.AdminId)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LigaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	l = len(m.AdminId)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLiga(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLiga(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiga(x uint64) (n int) {
	return sovLiga(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllLigaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiga
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllLigaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllLigaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiga(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiga
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ligas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiga
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ligas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ligas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ligas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ligas = append(m.Ligas, &LigaResponse{})
			if err := m.Ligas[len(m.Ligas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiga(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiga
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LigaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiga
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LigaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LigaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiga(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiga
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LigaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiga
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LigaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LigaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiga(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiga
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiga
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiga
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiga
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiga(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiga
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiga(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiga
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiga
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiga
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiga
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiga
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiga        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiga          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiga = fmt.Errorf("proto: unexpected end of group")
)
